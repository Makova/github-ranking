\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage{hyperref}
\usepackage{subfigure}

<<setup, cache=FALSE,echo=FALSE>>=
library("ggplot2")
load(".RData")
@ 

\title{Github rankings and its impact on the local free software
  development community}
\author{JJ Merelo\thanks{GeNeura Team and Free Software Office, University of Granada}}

\begin{document}
\maketitle

\begin{abstract}
  Creating rankings might seem like a vain exercise in belly-button
  gazing, even more so for people so unlike that kind of things as
  programmers. However, in this paper we will try to prove how
  creating city (or province) based rankings in Spain has led to all
  kind of interesting effects, including increased productivity and
  community building.
\end{abstract}

\section{Introduction}

One of the keys to create a community is to actually identify who is
part of it. As part of the effort by the Free Software Office of the
University of Granada, we have tried, through the years, to know who
is involved in the creation of open source software. However, the only
way of finding out who was is to make them come to any of our events
or contact us through any means.

So the initial intention for creating a ranking of FLOSS developers
was to know who is out there and the kind of things they are doing, be
them part of the university or not; creating a census would allow us
to discover new FLOSS developers in our own city.

So we used initialy the GitHub top-1000 generation script by Paul
Miller \href{https://github.com/paulmillr/top-github-users} to achieve
that, making small modifications to the source and creating our own
version, which was eventually 
\href{https://github.com/JJ/github-city-rankings}{moved to a new repository}. But this had
several effects. First, as soon as the ranking was published some
people contacted us and the first GitHub meetup in Granada took
place. More modifications and changes were added and new data was
obtained. As part of the code tests, more cities were tested and we
ended up with lots of data. And data begs for analysis, which we
eventually started to do. And, along the way, we built a community of
users that previously had not known each other and we discovered that
the only fact that a census exists does not imply that there is a
community, but it definitely helps. 

In this paper, using the tool that we have created for searching for
the users in particular cities or provinces, we will show how the
GitHub activity in these cities or provinces compare with each other
and what kind of characteristics they have, including basic
metrics. We will also delve into the effect of publishing the ranking
itself, which has surprisingly increased the productivity of all
communities measured. Finally, we will try to draw some conclusions on
how measuring activity affects that activity and what are the general
characteristics of open source developers in the provinces measured,
which are the top 20 in population in Spain.

Coming up next we will review different papers that deal with creating
lists and rankings of contributions and trying to measure or explain
the dynamics of communities. In section \ref{sec:exp} we will show the
methodology for obtaining the users in a particular province in Spain;
next we will analyze data obtained and show how different provinces
stack up in terms of contributions and finally we will draw some
conclusions. 

\section{State of the art}

Geographically based community metrics do not seem to have arisen a
lot of interest in the FLOSS metrics \cite{herraiz2009flossmetrics} community. Most efforts seem to
be focused in creating tools for actually measuring repositories for
activity; for instance, Laura Arjona describes the {\em Debian
  Contributors} tool in \cite{arjona:debian} whose results are dumped
to a website that includes information on the projects that every user
has contributed and some other data such as how users are identified
in the databases. 

It is interesting to note that some models \cite{robles05} use the
concept of stigmergy, that is, interaction using the environment, to
model the dynamics of libre software projects; the mere existence of
these tools can be a catalyzer of this interaction and the harbinger
of new software projects. In fact, this seems to be what has happened
in the community (or communities) under observation: the mere creation of
a document that mentions many different users acts as a substrate that
allows the creation and growth of the community through the stigmergy paradigm.

Next we will briefly explain the tool that was designed to search for
geographically based GitHub users.


\section{GitHub city rankings, the tool}
\label{sec:exp}

It is quite unlikely that if you are reading this you do not know what
is  \href{http://github.com}{GitHub}. GitHub is a web-based git
repository that has a number of ``social'' features, including the
declaration of a profile and {\tt @} mentions in commit messages and
issues. The profile page includes information on the number of
followers, as well as the repositories and the number of contributions
every person has made during the last year. Besides this
easily-scrapeable information, GitHub has a REST API that can be
accessed from any language. 

Some other web-based repos do have many of the characteristics, and,
besides, are based in free software themselves, like
Gitorious. However, the number of users of these repositories is quite
small compared to GitHub, which has become the tool of choice for
FLOSS developers. That is why GitHub was chosen, apart from the
availability of tools to mine profile information. 

The \href{https://github.com/paulmillr/top-github-users}{tool used initially, by Paul
Miller} was
written in CoffeeScript and designed for creating a ranking of the top
1000 users with more than an (arbitrary) numbers of followers equal to
256. The tool used the GitHub REST API to make requests, and saved
them in a human-readable form in Markdown and also CSV and JSON. It
was separated in three scripts that were called from a Makefile. Some
utility functions were written in Node.js; the node.js module was
called from several scripts.

Our intention was to look for users in a particular location, that is,
to limit them not by minimum number of users but for the location
declared in the profile. Every run of the program required 10 API
requests which is limited to 20 per hour, so we modified it so that it
used authenticated requests, besides. Finally, we had to rearrange the
whole code so that it counted the number of stars and could be
filtered according to regular expressions, since the country a city or
province is might be ambiguous (you know Toledo, Ohio, but there is
also a Toledo in Spain). Besides, Markdown handling was kind of clumsy
so it was moved to a template-based solution.

One of the main problem we found in Spain was the ambiguity of the
province name. Besides the fact that people write it in any of the
official languages (Spanish and, in some cases, national languages
like Basque or Catalan) and, well, sometimes with typos (with or
without tildes), some people do not mention their province when
writing their location. To make a long story short, we had to provide
a configuration file (in JSON) which lists several possible names that
might be used by people in a particular province; for instance, for
Majorca we had to include this: {\tt "location":
  ["Balears","Baleares","Palma de Mallorca"]}. This, of course,
excludes those that simply do not care about listing their location,
but more on this later on.

The script is then run with a city name (if there is no particular
configuration option, {\tt Madrid}, for instance) or a configuration
file name {\tt granada}). This can be launched weekly, or simply at a
particular moment or under request. 

The results for each user list the number of followers, contributions,
the number of stars his/her repositories have received, the longest
and the current 
contribution streak as well as the {\em predominant} language and
avatar. Some of these metrics are shown in the Markdown rankings; for
instance, see the 
\href{https://github.com/JJ/top-github-users-data/blob/master/formatted/top-Madrid.md}{one for Madrid:}.

Data is saved to a 
\href{https://github.com/JJ/top-github-users-data/}{different repository} and is aggregated
and processed using R and Perl scripts. All of them are included in
the same repository. As part of our commitment to free/open science,
all graphics and data were published as soon as they were produced in
Twitter from my {\tt @jjmerelo} account. 

\section{Results and analysis}
\label{sec:res}

We reduced the search to the 20 most populated provinces in Spain, for
which appropriate search strings and filters were created. All data
was downloaded during January 2015, and is available from the already
mentioned repo.  Aggregate data for these 20 provinces is shown in
table \ref{tab:data}.

\begin{table}[h]
  \begin{tabular}{|r|c|c|c|c|c|c|}
<<kable,results="asis",echo=FALSE>>=
kable(top20.data)
@
\end{tabular}
\caption{Raw aggregate measures for the 20 most populated provinces,
  including the population (taken from the National Statistics
  Institute), the number of users and their contributions, stars and
  followers and the average number of contributions: contributions / users. Please note that province names do not correspond to official names, having rather been chosen a bit arbitrarily from the search strings used}
\label{tab:data}
\end{table}

The range of users shown in the table hovers around the hundreds, with
the one in the biggest provincies (and cities) approaching
1000. However, population and users/contributions are not directly
related. We can already see some differences in figure \ref{fig:user:contrig}, that shows the number of contributions (left) and users (right) in decreasing order. The first two, Madrid and Barcelona, should only be expected, but then Granada (17th in population) and Zaragoza also occupy a place that does not correspond exactly to the population they have; same as Bilbao (actually Vizcaya), but in the opposite direction.  

\begin{figure}[htb]
  \centering
<<byfollow, echo=FALSE, out.width='.49\\linewidth',fig.height=6, fig.subcap=c('Contributions', 'Users'),>>=
ggplot(top20.data.bycontrib,aes(x=province,y=contributions)) + geom_bar(stat='identity')+xlab("Contributions")+ coord_flip()
ggplot(top20.data.byuser,aes(x=province,y=users)) + geom_bar(stat='identity')+xlab("Contributions")+ coord_flip()
@
\caption{Provinces ranked by number of users}
\label{fig:user:contrib}
\end{figure}
%
\begin{figure}[htb]
  \centering
<<zipf, echo=FALSE, out.width='.49\\linewidth',fig.height=6, fig.subcap=c('Contributions', 'Users'),>>=
ggplot()+geom_point(data=barcelona.data, aes(x=seq_along(contributions), y= log10(contributions),color='BCN')) +geom_point(data=zaragoza.data,aes(y=log10(contributions), x=seq_along(contributions),color='ZGZ'))+geom_point(data=madrid.data, aes(x=seq_along(contributions), y= log10(contributions),color='MAD')) +geom_point(data=granada.data,aes(y=log10(contributions), x=seq_along(contributions),color='GRX'))+geom_point(data=sevilla.data, aes(x=seq_along(contributions), y= log10(contributions),color='SVQ')) +geom_point(data=valencia.data,aes(y=log10(contributions), x=seq_along(contributions),color='VLC'))+labs(color="City")+xlab("Rank")
ggplot()+geom_point(data=barcelona.data, aes(x=seq_along(followers), y=log10(sort(followers,decreasing=TRUE)),color='BCN')) +geom_point(data=zaragoza.data,aes(y=log10(sort(followers,decreasing=TRUE)), x=seq_along(followers),color='ZGZ'))+geom_point(data=madrid.data, aes(x=seq_along(followers), y=log10(sort(followers,decreasing=TRUE)),color='MAD')) +geom_point(data=granada.data,aes(y=log10(sort(followers,decreasing=TRUE)), x=seq_along(followers),color='GRX'))+geom_point(data=sevilla.data, aes(x=seq_along(followers), y=log10(sort(followers,decreasing=TRUE)),color='SVQ')) +geom_point(data=valencia.data,aes(y=log10(sort(followers,decreasing=TRUE)), x=seq_along(followers),color='VLC'))+labs(color="City")+ylab('log10(followers)')+xlab("Rank")
@
\caption{Zipf graph, rank vs. number of contributions (left) or followers (right) for the top 6 provinces in number of users and contributions: Madrid, Barcelona, Valencia, Granada, Sevilla, Zaragoza}
\label{fig:zipf}
\end{figure}
%

So let us look at the distribution of contributions and users looking for an explanation of the dancing places in the ranking. A users and contributions vs. rank plot is shown in figure \ref{fig:zipf}; it shows different slopes which imply different distribution, but there is a clear indication that a Zipf-like distribution is taking place in all cases. So let us compute the Zipf exponent and objective, which we show in table \ref{tab:zipf}.

\begin{table}[h]
  \begin{tabular}{|r|c|c|}
<<zipfexp,echo=FALSE>>=
#Taken from http://stats.stackexchange.com/questions/6780/how-to-calculate-zipfs-law-coefficient-from-a-set-of-top-frequencies

p<-madrid.data$contributions/sum(madrid.data$contributions)

lzipf <- function(s,N) -s*log(1:N)-log(sum(1/(1:N)^s))

opt.f <- function(s) sum((log(p)-lzipf(s,length(p)))^2)

opt <- optimize(opt.f,c(0.5,10))
zipf.city <- data.frame(city='Madrid',min=opt$minimum, obj=opt$objective)

p<-barcelona.data$contributions/sum(barcelona.data$contributions)

opt.f <- function(s) sum((log(p)-lzipf(s,length(p)))^2)

opt <- optimize(opt.f,c(0.5,10))
zipf.city <- rbind(zipf.city,data.frame(city='Barcelona',min=opt$minimum, obj=opt$objective))

p<-granada.data$contributions/sum(granada.data$contributions)

opt.f <- function(s) sum((log(p)-lzipf(s,length(p)))^2)

opt <- optimize(opt.f,c(0.5,10))
zipf.city <- rbind(zipf.city,data.frame(city='Granada',min=opt$minimum, obj=opt$objective))

p<-zaragoza.data$contributions/sum(zaragoza.data$contributions)

opt.f <- function(s) sum((log(p)-lzipf(s,length(p)))^2)

opt <- optimize(opt.f,c(0.5,10))
zipf.city <- rbind(zipf.city,data.frame(city='Zaragoza',min=opt$minimum, obj=opt$objective))

p<-valencia.data$contributions/sum(valencia.data$contributions)

opt.f <- function(s) sum((log(p)-lzipf(s,length(p)))^2)

opt <- optimize(opt.f,c(0.5,10))
zipf.city <- rbind(zipf.city,data.frame(city='Valencia',min=opt$minimum, obj=opt$objective))

p<-sevilla.data$contributions/sum(sevilla.data$contributions)

opt.f <- function(s) sum((log(p)-lzipf(s,length(p)))^2)

opt<- optimize(opt.f,c(0.5,10))
zipf.city <- rbind(zipf.city,data.frame(city='Sevilla',min=opt$minimum, obj=opt$objective))

kable(zipf.city)
@ 
\end{tabular}
\caption{Zipf coefficients for all 6 ``big'' cities, with slope and objective }
\label{tab:zipf}
\end{table}

This can be interpreted in a different way by plotting the Lorenz curve, which is the accumulated normalized sum of contributions for these six cities. This is shown in figure \ref{fig:lorenz}; this Lorenz curve tends to represent the inequality between those that contribute more and those that contribute less and is usually represented by the Gini index, which is shown in table \ref{tab:gini}

\begin{figure}[htb]
  \centering
<<lorenz, echo=FALSE, fig.height=6, fig.width=8>>=
ggplot()+geom_point(data=barcelona.data, aes(x=seq_along(contributions)/length(contributions), y=cumsum(sort(contributions))/sum(contributions),color='BCN'))+geom_point(data=zaragoza.data, aes(x=seq_along(contributions)/length(contributions), y=cumsum(sort(contributions))/sum(contributions),color='ZGZ'))+geom_point(data=madrid.data, aes(x=seq_along(contributions)/length(contributions), y=cumsum(sort(contributions))/sum(contributions),color='MAD'))+geom_point(data=granada.data, aes(x=seq_along(contributions)/length(contributions), y=cumsum(sort(contributions))/sum(contributions),color='GRX'))+geom_point(data=sevilla.data, aes(x=seq_along(contributions)/length(contributions), y=cumsum(sort(contributions))/sum(contributions),color='SVQ'))+geom_point(data=valencia.data, aes(x=seq_along(contributions)/length(contributions), y=cumsum(sort(contributions))/sum(contributions),color='VLC'))+xlab('rank')+ylab('contributions')+labs(color="City")
@
\caption{Lorenz graph, that is, accumulated number of contributions vs rank for the top 6 provinces in number of users and contributions: Madrid, Barcelona, Valencia, Granada, Sevilla, Zaragoza}
\label{fig:lorenz}
\end{figure}
%
\begin{table}[h]
  \begin{tabular}{|r|c|c|}
<<gini,echo=FALSE>>=
library(ineq)
gini.city <- data.frame(city='Madrid', gini= ineq(madrid.data$contributions,type='Gini'))
gini.city <- rbind(gini.city,  data.frame(city='Granada', gini= ineq(granada.data$contributions,type='Gini')))
gini.city <- rbind(gini.city,  data.frame(city='Zaragoza', gini= ineq(zaragoza.data$contributions,type='Gini')))
gini.city <- rbind(gini.city,  data.frame(city='Sevilla', gini= ineq(sevilla.data$contributions,type='Gini')))
gini.city <- rbind(gini.city,  data.frame(city='Barcelona', gini= ineq(barcelona.data$contributions,type='Gini')))
gini.city <- rbind(gini.city,  data.frame(city='Valencia', gini= ineq(valencia.data$contributions,type='Gini')))

kable(gini.city)
@ 
\end{tabular}
\caption{Gini coefficients for all 6 ``big'' cities }
\label{tab:gini}
\end{table}
\section{Conclusions}

\section{Acknowledgements}

This paper is part of the open science effort at the university of
Granada. It has been written using knitr, and its source as well as
the data used to create it can be downloaded from
\href{https://github.com/geneura-papers/github-ranking}. It has been supported in part by GeNeura Team
\href{http://geneura.wordpress.com}. 
  




\bibliographystyle{plain}
\bibliography{geneura,rankings}

\end{document}
